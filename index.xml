<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Kit&#39;s Site</title>
    <link>http://menggus.github.io/</link>
    <description>Recent content in Introduction on Kit&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://menggus.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://menggus.github.io/docs/golang/go-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/golang/go-%E5%9F%BA%E7%A1%80/</guid>
      <description>关键字#25个关键字
 break default func interface selectcase defer go map structchan else goto package switchconst fallthrough if range typecontinue for import return var37个保留字
Constants:	true false iota nilTypes:	int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptrfloat32 float64 complex128 complex64bool byte rune string errorFunctions:	make len cap new append copy close deletecomplex real imagpanic recover变量# WARNING</description>
    </item>
    
    <item>
      <title>Linux定时任务</title>
      <link>http://menggus.github.io/posts/%E5%AE%9A%E6%97%B6%E8%84%9A%E6%9C%AC%E6%9D%A5%E5%8E%BB%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/posts/%E5%AE%9A%E6%97%B6%E8%84%9A%E6%9C%AC%E6%9D%A5%E5%8E%BB%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/</guid>
      <description>定时脚本来去更新博客#每次写静态博客会存在github上面，虽然写完会进行手动推送到github，但是每次在服务器来去就觉得麻烦，所以就写个定时任务来帮我执行拉取更新命令
先来介绍下cron#ubuntu下的定时任务，能定期执行命令
开始使用#查看cron是否运行#ps -ef|grep cron
ubuntu@VM-0-10-ubuntu:~$ ps -ef |grep cronroot 970 1 0 Feb28 ? 00:00:21 /usr/sbin/cron -fubuntu 23388 8185 0 22:51 pts/0 00:00:00 grep --color=auto cron# 如果没有运行可以运行# sudo service cron start编写脚本命令#vim pull.sh
#!/bin/bashcd /home/ubuntu/blogs/root/ # /home/ubuntu/blogs/root/ 本地仓库git pullchmod +x ./pull.sh 添加执行权限
编写定时任务#sudo crontab -e</description>
    </item>
    
    <item>
      <title>Load Data 数据导入</title>
      <link>http://menggus.github.io/docs/pxc/load-data-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/pxc/load-data-%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/</guid>
      <description>LOAD DATA批量导入数据#导入环境#mycat + pxc
mycat：数据切分
pxc：两个分片，每个分片只开启一个节点。（对于其他节点的数据同步，采用直接拷贝方式）
数据源#采用golang编写，生成1000万行的简单数据，数据采用文本方式存储；
1,测试数据2,测试数据3,测试数据...10000000,测试数据数据库表
CREATE TABLE t_test ( id int NOT NULL, name varchar(200) NOT NULL, PRIMARY KEY (&amp;#39;id&amp;#39;) ) code
/* 生成导入到数据库的数据； 对应数据库表字段 id name */ package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) const num = 10000000 func generate() { file, err := os.Create(&amp;#34;./data.txt&amp;#34;) if err != nil { fmt.</description>
    </item>
    
    <item>
      <title>Percona 集群相关</title>
      <link>http://menggus.github.io/docs/pxc/percona-percona-xtradb-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/pxc/percona-percona-xtradb-cluster/</guid>
      <description>Percona 集群相关#Percona 数据库#准备工作#jemalloc-3.6.0-1. centos7 el7.x86_64.rpm
Percona-Server-5.7.32-35-r5688520-el7-x86_64-bundle centos7.tar
安装#解压.tar## 拷贝至目录 scp jemalloc-3.6.0-1. centos7 el7.x86_64.rpm Percona-Server-5.7.32-35-r5688520-el7-x86_64-bundle centos7.tar centos7.tar root@192.168.31.129:/home cd /home tar -xf Percona-Server-5.7.32-35-r5688520-el7-x86_64-bundle centos7.tar yum localinstall *.rpm 启动#systemctl start mysqld
防火墙开放 3306#firewall-cmd --zone=public --add-port=3306/tcp --permanent 开放3306
&amp;ndash;permanent： 永久生效，重启系统后依然生效
firewall-cmd --reload 重新导入配置
修改数据库配置文件#vi /etc/my.cnf character_set_server = utf8 bind-address = 0.</description>
    </item>
    
    <item>
      <title>Ubuntu 软件源</title>
      <link>http://menggus.github.io/docs/linux/ubuntu-%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E8%BD%AF%E4%BB%B6%E6%BA%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/linux/ubuntu-%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E8%BD%AF%E4%BB%B6%E6%BA%90/</guid>
      <description>ubuntu 把软件源修改为国内源和更新#  备份原始文件
sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup  修改文件并添加国内源
vi /etc/apt/sources.list	  注释原文件内的源 并添加如下地址 复制代码
# Ubuntu 官方源deb http://archive.ubuntu.com/ubuntu/ gutsy main restricted universe multiversedeb http://archive.ubuntu.com/ubuntu/ gutsy-security main restricted universe multiversedeb http://archive.ubuntu.com/ubuntu/ gutsy-updates main restricted universe multiversedeb http://archive.ubuntu.com/ubuntu/ gutsy-proposed main restricted universe multiversedeb http://archive.ubuntu.com/ubuntu/ gutsy-backports main restricted universe multiversedeb-src http://archive.ubuntu.com/ubuntu/ gutsy main restricted universe multiversedeb-src http://archive.ubuntu.com/ubuntu/ gutsy-security main restricted universe multiversedeb-src http://archive.</description>
    </item>
    
    <item>
      <title>多平台交叉编译</title>
      <link>http://menggus.github.io/docs/golang/go-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/golang/go-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>多平台交叉编译#windows#window平台下编译其他平台的程序文件，修改 go env 配置
Mac# go env SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 Linux# go env SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 示例：go env -w CGO_ENABLED=0 GOOS=linux GOARCH=amd64
Linux#Linux平台下编译其他平台的程序文件，修改 go env 配置
Mac# go env SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 Windows# go env SET CGO_ENABLED=0 SET GOOS=windows SET GOARCH=amd64 示例：go env -w CGO_ENABLED=0 GOOS=windows GOARCH=amd64</description>
    </item>
    
    <item>
      <title>错误处理策略</title>
      <link>http://menggus.github.io/docs/golang/go-%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/golang/go-%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5/</guid>
      <description>Go 中的错误处理策略#一、传递错误#传递错误就是向函数的调用者传递错误。
当函数返回错误时，调用者应该负责检查错误并采取合适的方式进行处理。
 1.直接返回错误，不做任何的修改与包装
return nil, err   2.对错误进行包装再返回
if err != nil { return nil, fmt.Errorf(&amp;#34;parsing %s as HTML: %V&amp;#34;, url, err) }  包装error宗旨：错误信息能够提供一个从最根本问题到总体问题故障的清晰因果链
1.包含充足的相关信息，并保持一致性
2.传递过程中不断补充在处理错误可能需要的信息
二、多次重试后，再传递错误#对于不固定和不可预测的错误，在短暂的间隔后再进行重试，超出重试次数和限定时间后再报错退出。
gop1.io/ch5/wait
// WaitForServer 尝试连接URL对应的服务器 // 在一分钟内使用指数退避策略进行重试 // 所有尝试失败后退出 func WaitForServer(url string) error { const timeout = 1 * time.Minute deadline := time.Now().Add(timeout) for tries := 0; time.Now().Before(deadline); tries ++ { _, err := http.</description>
    </item>
    
    <item>
      <title>集群优化相关</title>
      <link>http://menggus.github.io/docs/pxc/%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/pxc/%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/</guid>
      <description>分页查询优化#这边先看几个简单例子：
-- 查询优化 select * from t_test limit 100,100; -- 85ms select * from t_test limit 1000,100; -- 279ms select * from t_test limit 10000,100;	-- 2s31ms select * from t_test limit 100000,100; -- 19s497ms 怎么去优化呢？
我们可以通过 explain 命令来查看，可关注type all为全表扫描，查看rows可以知道扫描数据row数
mysql&amp;gt; explain select * from t_test limit 1000,100; +----+-------------+--------+------------+------+---------------+------+---------+------+---------+----------+-------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+--------+------------+------+---------------+------+---------+------+---------+----------+-------+ | 1 | SIMPLE | t_test | NULL | ALL | NULL | NULL | NULL | NULL | 4585371 | 100.</description>
    </item>
    
  </channel>
</rss>
