<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang 基础 on Kit&#39;s Site</title>
    <link>http://menggus.github.io/docs/golang/</link>
    <description>Recent content in Golang 基础 on Kit&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://menggus.github.io/docs/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>多平台交叉编译</title>
      <link>http://menggus.github.io/docs/golang/go-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/golang/go-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>多平台交叉编译#windows#window平台下编译其他平台的程序文件，修改 go env 配置
Mac# go env SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 Linux# go env SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 示例：go env -w CGO_ENABLED=0 GOOS=linux GOARCH=amd64
Linux#Linux平台下编译其他平台的程序文件，修改 go env 配置
Mac# go env SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 Windows# go env SET CGO_ENABLED=0 SET GOOS=windows SET GOARCH=amd64 示例：go env -w CGO_ENABLED=0 GOOS=windows GOARCH=amd64</description>
    </item>
    
    <item>
      <title>错误处理策略</title>
      <link>http://menggus.github.io/docs/golang/go-%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://menggus.github.io/docs/golang/go-%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5/</guid>
      <description>Go 中的错误处理策略#一、传递错误#传递错误就是向函数的调用者传递错误。
当函数返回错误时，调用者应该负责检查错误并采取合适的方式进行处理。
 1.直接返回错误，不做任何的修改与包装
return nil, err   2.对错误进行包装再返回
if err != nil { return nil, fmt.Errorf(&amp;#34;parsing %s as HTML: %V&amp;#34;, url, err) }  包装error宗旨：错误信息能够提供一个从最根本问题到总体问题故障的清晰因果链
1.包含充足的相关信息，并保持一致性
2.传递过程中不断补充在处理错误可能需要的信息
二、多次重试后，再传递错误#对于不固定和不可预测的错误，在短暂的间隔后再进行重试，超出重试次数和限定时间后再报错退出。
gop1.io/ch5/wait
// WaitForServer 尝试连接URL对应的服务器 // 在一分钟内使用指数退避策略进行重试 // 所有尝试失败后退出 func WaitForServer(url string) error { const timeout = 1 * time.Minute deadline := time.Now().Add(timeout) for tries := 0; time.Now().Before(deadline); tries ++ { _, err := http.</description>
    </item>
    
  </channel>
</rss>
